!function(){"use strict";function e(){return{restrict:"E",scope:{basePath:"@",languages:"=",translations:"=",queries:"=",onUpdate:"=",onRemove:"=",isValid:"="},replace:!0,templateUrl:"translate-editor.tpl.html",controller:"TranslateEditorController",controllerAs:"locale",bindToController:!0}}function n(e){function n(){_.each(v.languages,function(e){v.insertNewObject[e]=!1,v.tabs[e]={$isOpen:!1},v.bindings[e]={forms:[]},v.xmlDefinitions[e]=JSON.toXML(v.translations[e])}),_.isEmpty(v.basePath)||(v.search=v.basePath,g(v.basePath)),v.isValid=h()}function a(){_.each(v.languages,function(e){v.xmlDefinitions[e]=JSON.toXML(v.translations[e])})}function t(){_.each(v.languages,function(e){v.bindings[e].forms=[]})}function i(e){return _.all(e,function(e,n){return _.isString(e)})}function o(e,n){var a=e;return _.each(n,function(e){a=a[e]}),a}function l(e,n){if(n=n||[],e.parentNode&&(n=l(e.parentNode,n)),e.previousSibling){var a=1,t=e.previousSibling;do 1==t.nodeType&&t.nodeName==e.nodeName&&a++,t=t.previousSibling;while(t);1==a&&(a=null)}else if(e.nextSibling){var i=e.nextSibling;do i=1==i.nodeType&&i.nodeName==e.nodeName?null:i.previousSibling;while(i)}return 1==e.nodeType&&n.push(e.nodeName),n}function s(){_.each(v.languages,function(e){v.tabs[e].$isOpen=v.isAllCollapsed})}function r(e){return _.contains(_.pluck(v.queries,"search"),e)}function u(e){if(r(e))v.queries=_.reject(v.queries,{search:e});else{var n=prompt("Please enter a label: ",e);_.isEmpty(n)||v.queries.push({label:n,search:e})}}function c(e,n,t,i){var l=o(e,n.path);l[t]=i,n.value=l,l=null,v.isValid=!_.isEmpty(i),a()}function p(e,n){var t=o(e,n.path);t[v.newKey]=v.insertNewObject[n.lang]?{}:n.newValue,n.value=t,t=null,_.each(_.without(v.languages,n.lang),function(e){t=o(v.translations[e],n.path),_.has(t,v.newKey)||(t[v.newKey]=v.insertNewObject[n.lang]?{}:n.newValue,_.map(v.bindings[e].forms,function(e){e.value=t}))}),delete v.newKey,delete n.newValue,a()}function f(e,t){_.each(v.languages,function(n){var a;t?(a=o(v.translations[n],e.path),delete a[t]):(a=o(v.translations[n],e.path.slice(0,-1)),delete a[_.last(e.path)]),_.map(v.bindings[n].forms,function(n){n.label==e.label&&(n.value=a)})}),t||(delete v.search,n()),a()}function d(e){v.isValid=!_.isEmpty(e.value),e.element.innerHTML=e.value;var n=Defiant.node.toJSON(v.xmlDefinitions[e.lang]);angular.copy(n,v.translations[e.lang])}function g(e){if(delete v.newKey,e)try{e=angular.uppercase(e),_.each(v.languages,function(n){v.bindings[n].forms=[];var a=Defiant.node.selectNodes(v.xmlDefinitions[n],e);_.each(a,function(e,a){var t=Defiant.node.toJSON(e),o=l(e).slice(1),s={lang:n,label:o.join("."),path:o,hasInput:"object"!=typeof e,isFlat:_.all(t,function(e,n){return i(e)}),value:t,element:e};s.hasInput="object"!=typeof t,v.bindings[n].forms.push(s)}),v.hasError=!1})}catch(n){v.hasError=!0,t()}else v.hasError=!1,t()}function h(){return _.all(v.languages,function(e){return _.all(v.bindings[e].forms,function(e){return!_.isEmpty(e.value)})})}function b(e,n){return n&&(n.preventDefault(),n.stopPropagation()),v.onUpdate(e)}function m(e,n){return n&&(n.preventDefault(),n.stopPropagation()),v.onRemove(e)}var v=this;v.basePath=v.basePath||"",v.languages=v.languages||[],v.translations=v.translations||{},v.queries=v.queries||[],v.hasUpdateFn=_.isFunction(v.onUpdate),v.hasRemoveFn=_.isFunction(v.onRemove),v.onUpdate=v.onUpdate||angular.noop(),v.onRemove=v.onRemove||angular.noop(),v.isValid=v.isValid||!1,v.tabs={},v.insertNewObject={},v.bindings={},v.xmlDefinitions={},v.hasError=!1,v.isEmpty=_.isEmpty,v.isString=_.isString,v.collapseAll=s,v.isFavourited=r,v.addFavourite=u,v.updateObject=c,v.writeObjectByKey=p,v.deleteObjectByKey=f,v.updateTranslations=d,v.findByKey=g,v.areTranslationsValid=h,v.callbackUpdate=b,v.callbackRemove=m,n(),e.$watch(function(){return v.languages},function(e,a){e!=a&&n()},!0)}angular.module("khchan.translate-editor",["ui.bootstrap","angular-translate-templates"]).directive("translateEditor",e).controller("TranslateEditorController",n),e.$inject=[],n.$inject=["$scope"]}();
//# sourceMappingURL=data:application/json;base64,

angular.module("angular-translate-templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("translate-editor.tpl.html","<div><div class=\"row\"><div class=\"form-group\" ng-class=\"{ \'has-error\': locale.hasError }\"><div class=\"input-group\"><input type=\"text\" class=\"form-control\" ng-model=\"locale.search\" ng-change=\"locale.findByKey(locale.search)\" ng-disabled=\"!locale.isValid\" ng-model-options=\"{ debounce: 500 }\" placeholder=\"Enter xPath Query Here\"><div class=\"input-group-btn\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"locale.addFavourite(locale.search)\"><span class=\"glyphicon\" ng-class=\"{\n							\'glyphicon-star\': !locale.isFavourited(locale.search),\n							\'glyphicon-star-empty\': locale.isFavourited(locale.search)\n						}\"></span></button></div></div><small ng-if=\"locale.hasError\" class=\"pull-right text-danger\">Invalid Query!</small></div><button type=\"button\" class=\"btn btn-default btn-sm\" ng-repeat=\"query in locale.queries\" ng-disabled=\"!locale.isValid\" ng-click=\"locale.findByKey(query.search); locale.search = query.search;\">{{query.label}}</button><div class=\"checkbox pull-right\"><label><input type=\"checkbox\" ng-model=\"locale.isAllCollapsed\" ng-change=\"locale.collapseAll()\"> Expand All</label></div><hr></div><div class=\"row\"><accordion ng-if=\"!locale.hasError\" close-others=\"false\"><accordion-group ng-repeat=\"language in locale.languages track by language\" is-open=\"locale.tabs[language].$isOpen\"><accordion-heading>{{language | uppercase}} Dictionary <i class=\"glyphicon\" ng-class=\"{\'glyphicon-chevron-down\': locale.tabs[language].$isOpen, \'glyphicon-chevron-right\': !locale.tabs[language].$isOpen}\"></i><div class=\"pull-right\"><button type=\"button\" tabindex=\"-1\" class=\"btn btn-danger btn-xs\" ng-if=\"locale.hasRemoveFn\" ng-click=\"locale.callbackRemove(language, $event)\">Remove</button></div></accordion-heading><div class=\"form-group\" ng-repeat=\"form in locale.bindings[language].forms\"><!-- Direct Access to Key --><div ng-if=\"form.hasInput\" ng-class=\"{ \'has-error\': !form.value }\"><label>{{form.label}}:</label><input type=\"text\" class=\"form-control input-sm\" ng-model=\"form.value\" ng-change=\"locale.updateTranslations(form)\" ng-model-options=\"{ debounce: 500 }\" required> <small ng-if=\"!form.value\" class=\"pull-right text-danger\">Missing Translation!</small></div><!-- Inference of Translation Module --><div ng-if=\"!form.hasInput\"><div ng-if=\"locale.isEmpty(form.value)\"><button type=\"button\" tabindex=\"-1\" class=\"btn btn-warning btn-sm pull-right\" ng-click=\"locale.deleteObjectByKey(form)\">Remove Empty Object</button></div><div class=\"panel panel-default\"><div class=\"panel-body\"><div ng-if=\"form.isFlat\"><div class=\"form-group\" ng-repeat=\"(key, value) in form.value\"><label>{{form.label}}.{{key}}</label><!-- String Fields --><div ng-if=\"locale.isString(value)\" class=\"input-group\" ng-class=\"{ \'has-error\': !form.value }\"><input type=\"text\" class=\"form-control input-sm\" ng-model=\"value\" ng-change=\"locale.updateObject(locale.translations[language], form, key, value)\" ng-model-options=\"{ debounce: 500 }\" required> <small ng-if=\"!form.value\" class=\"pull-right text-danger\">Missing Translation!</small><pre ng-if=\"!locale.isString(value)\">{{value | json}}</pre><span class=\"input-group-btn\"><button type=\"button\" tabindex=\"-1\" class=\"btn btn-warning btn-sm\" ng-click=\"locale.deleteObjectByKey(form, key)\">Delete</button></span></div><!-- Object Field --><div ng-if=\"!locale.isString(value)\"><pre>{{value | json}}</pre><button type=\"button\" tabindex=\"-1\" class=\"btn btn-warning btn-sm\" ng-click=\"locale.deleteObjectByKey(form, key)\">Delete</button></div></div></div><pre ng-if=\"!form.isFlat\">{{form.value | json}}</pre></div><div class=\"panel-footer\"><div class=\"row\"><div class=\"col-md-4\"><label>{{form.label}}.{{locale.newKey}}</label><input type=\"text\" class=\"form-control input-sm\" ng-model=\"locale.newKey\" placeholder=\"TRANSLATION_KEY\"></div><div class=\"col-md-8\"><label>Translated Value</label><div class=\"input-group\" ng-class=\"{ \'has-error\': !form.value }\"><input type=\"text\" ng-if=\"!locale.insertNewObject[language]\" class=\"form-control input-sm\" ng-model=\"form.newValue\" placeholder=\"Translated Value\" required> <small ng-if=\"!form.value\" class=\"pull-right text-danger\">Missing Translation!</small> <span class=\"input-group-btn\"><button type=\"button\" class=\"btn btn-primary btn-sm\" ng-disabled=\"(locale.insertNewObject[language] && !locale.newKey) || (!locale.insertNewObject[language] && !form.newValue || !locale.newKey)\" ng-click=\"locale.writeObjectByKey(locale.translations[language], form)\">Insert</button></span></div></div></div><div class=\"row\"><div class=\"col-md-12\"><div class=\"checkbox\"><label><input type=\"checkbox\" ng-model=\"locale.insertNewObject[language]\"> Insert As New Object</label></div></div></div></div></div></div></div><div ng-if=\"locale.search\" class=\"checkbox\"><label><input type=\"checkbox\" ng-model=\"locale.showAll[language]\"> Show Full Translation</label></div><pre ng-if=\"!locale.search || locale.showAll[language]\">{{locale.translations[language] | json}}</pre></accordion-group></accordion></div></div>");}]);