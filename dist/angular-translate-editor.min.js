!function(){"use strict";function e(){return{restrict:"E",scope:{basePath:"@",languages:"=",translations:"=",queries:"=",onUpdate:"=",onRemove:"=",isValid:"="},replace:!0,templateUrl:"translate-editor.tpl.html",controller:"TranslateEditorController",controllerAs:"locale",bindToController:!0}}function n(e){function n(){_.each(w.languages,function(e){w.insertNewObject[e]=!1,w.tabs[e]={$isOpen:!1},w.bindings[e]={forms:[]},w.xmlDefinitions[e]=JSON.toXML(w.translations[e])}),_.isEmpty(w.basePath)||(w.search=w.basePath,h(w.basePath)),w.isValid=m()}function a(){_.each(w.languages,function(e){w.xmlDefinitions[e]=JSON.toXML(w.translations[e])})}function t(){_.each(w.languages,function(e){w.bindings[e].forms=[],delete w.bindings[e].newForm})}function i(e){return _.all(e,function(e,n){return _.isString(e)})}function l(e,n){var a=e;return _.each(n,function(e){a=a[e]}),a}function s(e,n){var a=e;try{return _.each(n,function(e){if(_.has(a,e)){if(_.isString(a[e]))throw"invalid path"}else a[e]={};a=a[e]}),a}catch(t){return null}}function o(e,n){if(n=n||[],e.parentNode&&(n=o(e.parentNode,n)),e.previousSibling){var a=1,t=e.previousSibling;do 1==t.nodeType&&t.nodeName==e.nodeName&&a++,t=t.previousSibling;while(t);1==a&&(a=null)}else if(e.nextSibling){var i=e.nextSibling;do i=1==i.nodeType&&i.nodeName==e.nodeName?null:i.previousSibling;while(i)}return 1==e.nodeType&&n.push(e.nodeName),n}function r(){_.each(w.languages,function(e){w.tabs[e].$isOpen=w.isAllCollapsed})}function u(e){return _.contains(_.pluck(w.queries,"search"),e)}function c(e){if(u(e))w.queries=_.reject(w.queries,{search:e});else{var n=prompt("Please enter a label: ",e);_.isEmpty(n)||w.queries.push({label:n,search:e})}}function p(e,n,t,i){var s=l(e,n.path);s[t]=i,n.value=s,s=null,w.isValid=!_.isEmpty(i),a()}function d(e,n){var t=l(e,n.path);t[w.newKey]=w.insertNewObject[n.lang]?{}:n.newValue,n.value=t,t=null,_.each(_.without(w.languages,n.lang),function(e){t=l(w.translations[e],n.path),_.has(t,w.newKey)||(t[w.newKey]=w.insertNewObject[n.lang]?{}:n.newValue,_.map(w.bindings[e].forms,function(e){e.value=t}))}),delete w.newKey,delete n.newValue,a()}function f(e,t){_.each(w.languages,function(n){var a;t?(a=l(w.translations[n],e.path),delete a[t]):(a=l(w.translations[n],e.path.slice(0,-1)),delete a[_.last(e.path)]),_.map(w.bindings[n].forms,function(n){n.label==e.label&&(n.value=a)})}),t||(delete w.search,n()),a()}function g(e){w.isValid=!_.isEmpty(e.value),e.element.innerHTML=e.value;var n=Defiant.node.toJSON(w.xmlDefinitions[e.lang]);angular.copy(n,w.translations[e.lang])}function h(e){if(delete w.newKey,e)try{e=angular.uppercase(e),_.each(w.languages,function(n){w.bindings[n].forms=[];var a=Defiant.node.selectNodes(w.xmlDefinitions[n],e);if(a.length)delete w.bindings[n].newForm,_.each(a,function(e,a){var t=Defiant.node.toJSON(e),l=o(e).slice(1);w.bindings[n].forms.push({lang:n,label:l.join("."),path:l,hasInput:"object"!=typeof t,isFlat:_.all(t,function(e,n){return i(e)}),value:t,element:e})});else{var t=e.split("/").slice(2),l=s(w.translations[n],t.slice(0,-1));_.isNull(l)||(w.bindings[n].newForm={lang:n,label:t.join("."),path:t,value:""})}w.hasError=!1})}catch(n){w.hasError=!0,t()}else w.hasError=!1,t()}function b(e){try{var n=l(w.translations[e.lang],e.path.slice(0,-1));n[_.last(e.path)]=e.value,a()}catch(i){w.hasError=!0,t()}}function m(){return _.all(w.languages,function(e){return _.all(w.bindings[e].forms,function(e){return!_.isEmpty(e.value)})})}function v(e,n){return n&&(n.preventDefault(),n.stopPropagation()),w.onUpdate(e)}function y(e,n){return n&&(n.preventDefault(),n.stopPropagation()),w.onRemove(e)}var w=this;w.basePath=w.basePath||"",w.languages=w.languages||[],w.translations=w.translations||{},w.queries=w.queries||[],w.hasUpdateFn=_.isFunction(w.onUpdate),w.hasRemoveFn=_.isFunction(w.onRemove),w.onUpdate=w.onUpdate||angular.noop(),w.onRemove=w.onRemove||angular.noop(),w.isValid=w.isValid||!1,w.tabs={},w.insertNewObject={},w.bindings={},w.xmlDefinitions={},w.hasError=!1,w.isEmpty=_.isEmpty,w.isString=_.isString,w.collapseAll=r,w.isFavourited=u,w.addFavourite=c,w.updateObject=p,w.writeObjectByKey=d,w.deleteObjectByKey=f,w.updateTranslations=g,w.findByKey=h,w.insertNewTranslation=b,w.areTranslationsValid=m,w.callbackUpdate=v,w.callbackRemove=y,n(),e.$watch(function(){return w.languages},function(e,a){e!=a&&n()},!0)}angular.module("khchan.translate-editor",["ui.bootstrap","angular-translate-templates"]).directive("translateEditor",e).controller("TranslateEditorController",n),e.$inject=[],n.$inject=["$scope"]}();
//# sourceMappingURL=data:application/json;base64,

angular.module("angular-translate-templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("translate-editor.tpl.html","<div><div class=\"row\"><div class=\"form-group\" ng-class=\"{ \'has-error\': locale.hasError }\"><div class=\"input-group\"><input type=\"text\" class=\"form-control\" ng-model=\"locale.search\" ng-change=\"locale.findByKey(locale.search)\" ng-disabled=\"!locale.isValid\" ng-model-options=\"{ debounce: 500 }\" placeholder=\"Enter xPath Query Here\"><div class=\"input-group-btn\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"locale.addFavourite(locale.search)\"><span class=\"glyphicon\" ng-class=\"{\n              \'glyphicon-star\': !locale.isFavourited(locale.search),\n              \'glyphicon-star-empty\': locale.isFavourited(locale.search)\n            }\"></span></button></div></div><small ng-if=\"locale.hasError\" class=\"pull-right text-danger\">Invalid Query!</small></div><button type=\"button\" class=\"btn btn-default btn-sm\" ng-repeat=\"query in locale.queries\" ng-disabled=\"!locale.isValid\" ng-click=\"locale.findByKey(query.search); locale.search = query.search;\">{{query.label}}</button><div class=\"checkbox pull-right\"><label><input type=\"checkbox\" ng-model=\"locale.isAllCollapsed\" ng-change=\"locale.collapseAll()\"> Expand All</label></div><hr></div><div class=\"row\"><uib-accordion ng-if=\"!locale.hasError\" close-others=\"false\"><uib-accordion-group ng-repeat=\"language in locale.languages track by language\" is-open=\"locale.tabs[language].$isOpen\"><uib-accordion-heading>{{language | uppercase}} Dictionary <i class=\"glyphicon\" ng-class=\"{\'glyphicon-chevron-down\': locale.tabs[language].$isOpen, \'glyphicon-chevron-right\': !locale.tabs[language].$isOpen}\"></i><div class=\"pull-right\"><button type=\"button\" tabindex=\"-1\" class=\"btn btn-danger btn-xs\" ng-if=\"locale.hasRemoveFn\" ng-click=\"locale.callbackRemove(language, $event)\">Remove</button></div></uib-accordion-heading><!-- Panel for new inputs to be inserted from unsucessful query --><div ng-if=\"locale.bindings[language].newForm\" ng-class=\"{ \'has-error\': !locale.bindings[language].newForm.value }\"><label>{{locale.bindings[language].newForm.label}}:</label><input type=\"text\" class=\"form-control input-sm\" ng-model=\"locale.bindings[language].newForm.value\" ng-change=\"locale.insertNewTranslation(locale.bindings[language].newForm)\" ng-model-options=\"{ debounce: 500 }\" required> <small ng-if=\"!locale.bindings[language].newForm.value\" class=\"pull-right text-danger\">Missing Translation!</small></div><!-- Panel for Inputs from Valid Query --><div class=\"form-group\" ng-repeat=\"form in locale.bindings[language].forms\"><!-- Direct Access to Key --><div ng-if=\"form.hasInput\" ng-class=\"{ \'has-error\': !form.value }\"><label>{{form.label}}:</label><input type=\"text\" class=\"form-control input-sm\" ng-model=\"form.value\" ng-change=\"locale.updateTranslations(form)\" ng-model-options=\"{ debounce: 500 }\" required> <small ng-if=\"!form.value\" class=\"pull-right text-danger\">Missing Translation!</small></div><!-- Inference of Translation Module --><div ng-if=\"!form.hasInput\"><div ng-if=\"locale.isEmpty(form.value)\"><button type=\"button\" tabindex=\"-1\" class=\"btn btn-warning btn-sm pull-right\" ng-click=\"locale.deleteObjectByKey(form)\">Remove Empty Object</button></div><div class=\"panel panel-default\"><div class=\"panel-body\"><div ng-if=\"form.isFlat\"><div class=\"form-group\" ng-repeat=\"(key, value) in form.value\"><label>{{form.label}}.{{key}}</label><!-- String Fields --><div ng-if=\"locale.isString(value)\" class=\"input-group\" ng-class=\"{ \'has-error\': !value }\"><input type=\"text\" class=\"form-control input-sm\" ng-model=\"value\" ng-change=\"locale.updateObject(locale.translations[language], form, key, value)\" ng-model-options=\"{ debounce: 500 }\"><pre ng-if=\"!locale.isString(value)\">{{value | json}}</pre><span class=\"input-group-btn\"><button type=\"button\" tabindex=\"-1\" class=\"btn btn-warning btn-sm\" ng-click=\"locale.deleteObjectByKey(form, key)\">Delete</button></span></div><!-- Object Field --><div ng-if=\"!locale.isString(value)\"><pre>{{value | json}}</pre><button type=\"button\" tabindex=\"-1\" class=\"btn btn-warning btn-sm\" ng-click=\"locale.deleteObjectByKey(form, key)\">Delete</button></div></div></div><pre ng-if=\"!form.isFlat\">{{form.value | json}}</pre></div><div class=\"panel-footer\"><div class=\"row\"><div class=\"col-md-4\"><label>{{form.label}}.{{locale.newKey}}</label><input type=\"text\" class=\"form-control input-sm\" ng-model=\"locale.newKey\" placeholder=\"TRANSLATION_KEY\"></div><div class=\"col-md-8\"><label>Translated Value</label><div class=\"input-group\" ng-class=\"{ \'has-error\': !form.value }\"><input type=\"text\" ng-if=\"!locale.insertNewObject[language]\" class=\"form-control input-sm\" ng-model=\"form.newValue\" placeholder=\"Translated Value\" required> <small ng-if=\"!form.value\" class=\"pull-right text-danger\">Missing Translation!</small> <span class=\"input-group-btn\"><button type=\"button\" class=\"btn btn-primary btn-sm\" ng-disabled=\"(locale.insertNewObject[language] && !locale.newKey) || (!locale.insertNewObject[language] && !form.newValue || !locale.newKey)\" ng-click=\"locale.writeObjectByKey(locale.translations[language], form)\">Insert</button></span></div></div></div><div class=\"row\"><div class=\"col-md-12\"><div class=\"checkbox\"><label><input type=\"checkbox\" ng-model=\"locale.insertNewObject[language]\"> Insert As New Object</label></div></div></div></div></div></div></div><div ng-if=\"locale.search\" class=\"checkbox\"><label><input type=\"checkbox\" ng-model=\"locale.showAll[language]\"> Show Full Translation</label></div><pre ng-if=\"!locale.search || locale.showAll[language]\">{{locale.translations[language] | json}}</pre></uib-accordion-group></uib-accordion></div></div>");}]);