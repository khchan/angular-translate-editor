!function(){"use strict";function e(){return{restrict:"E",scope:{basePath:"@",languages:"=",translations:"=",queries:"=",onUpdate:"=",onRemove:"="},replace:!0,templateUrl:"translate-editor.tpl.html",controller:"TranslateEditorController",controllerAs:"locale",bindToController:!0}}function n(e){function n(){_.each(m.languages,function(e){m.insertNewObject[e]=!1,m.tabs[e]={$isOpen:!1},m.bindings[e]={forms:[]},m.xmlDefinitions[e]=JSON.toXML(m.translations[e])}),_.isEmpty(m.basePath)||(m.search=m.basePath,g(m.basePath))}function t(){_.each(m.languages,function(e){m.xmlDefinitions[e]=JSON.toXML(m.translations[e])})}function a(){_.each(m.languages,function(e){m.bindings[e].forms=[]})}function i(e){return _.all(e,function(e,n){return _.isString(e)})}function o(e,n){var t=e;return _.each(n,function(e){t=t[e]}),t}function l(e,n){if(n=n||[],e.parentNode&&(n=l(e.parentNode,n)),e.previousSibling){var t=1,a=e.previousSibling;do 1==a.nodeType&&a.nodeName==e.nodeName&&t++,a=a.previousSibling;while(a);1==t&&(t=null)}else if(e.nextSibling){var i=e.nextSibling;do i=1==i.nodeType&&i.nodeName==e.nodeName?null:i.previousSibling;while(i)}return 1==e.nodeType&&n.push(e.nodeName),n}function s(){_.each(m.languages,function(e){m.tabs[e].$isOpen=m.isAllCollapsed})}function r(e){return _.contains(_.pluck(m.queries,"search"),e)}function u(e){if(r(e))m.queries=_.reject(m.queries,{search:e});else{var n=prompt("Please enter a label: ",e);_.isEmpty(n)||m.queries.push({label:n,search:e})}}function c(e,n,a,i){var l=o(e,n.path);l[a]=i,n.value=l,l=null,t()}function p(e,n){var a=o(e,n.path);a[m.newKey]=m.insertNewObject[n.lang]?{}:n.newValue,n.value=a,a=null,_.each(_.without(m.languages,n.lang),function(e){a=o(m.translations[e],n.path),_.has(a,m.newKey)||(a[m.newKey]=m.insertNewObject[n.lang]?{}:n.newValue,_.map(m.bindings[e].forms,function(e){e.value=a}))}),delete m.newKey,delete n.newValue,t()}function f(e,a){_.each(m.languages,function(n){var t;a?(t=o(m.translations[n],e.path),delete t[a]):(t=o(m.translations[n],e.path.slice(0,-1)),delete t[_.last(e.path)]),_.map(m.bindings[n].forms,function(n){n.label==e.label&&(n.value=t)})}),a||(delete m.search,n()),t()}function d(e){e.element.innerHTML=e.value;var n=Defiant.node.toJSON(m.xmlDefinitions[e.lang]);angular.copy(n,m.translations[e.lang])}function g(e){if(delete m.newKey,e)try{e=angular.uppercase(e),_.each(m.languages,function(n){m.bindings[n].forms=[];var t=Defiant.node.selectNodes(m.xmlDefinitions[n],e);_.each(t,function(e,t){var a=Defiant.node.toJSON(e),o=l(e).slice(1),s={lang:n,label:o.join("."),path:o,hasInput:"object"!=typeof e,isFlat:_.all(a,function(e,n){return i(e)}),value:a,element:e};s.hasInput="object"!=typeof a,m.bindings[n].forms.push(s)}),m.hasError=!1})}catch(n){m.hasError=!0,a()}else m.hasError=!1,a()}function h(e,n){return n&&(n.preventDefault(),n.stopPropagation()),m.onUpdate(e)}function b(e,n){return n&&(n.preventDefault(),n.stopPropagation()),m.onRemove(e)}var m=this;m.basePath=m.basePath||"",m.languages=m.languages||[],m.translations=m.translations||{},m.queries=m.queries||[],m.hasUpdateFn=_.isFunction(m.onUpdate),m.hasRemoveFn=_.isFunction(m.onRemove),m.onUpdate=m.onUpdate||angular.noop(),m.onRemove=m.onRemove||angular.noop(),m.tabs={},m.insertNewObject={},m.bindings={},m.xmlDefinitions={},m.hasError=!1,m.isEmpty=_.isEmpty,m.isString=_.isString,m.collapseAll=s,m.isFavourited=r,m.addFavourite=u,m.updateObject=c,m.writeObjectByKey=p,m.deleteObjectByKey=f,m.updateTranslations=d,m.findByKey=g,m.callbackUpdate=h,m.callbackRemove=b,n(),e.$watch(function(){return m.languages},function(e,t){e!=t&&n()},!0)}angular.module("khchan.translate-editor",["ui.bootstrap","angular-translate-templates"]).directive("translateEditor",e).controller("TranslateEditorController",n),e.$inject=[],n.$inject=["$scope"]}();
//# sourceMappingURL=data:application/json;base64,

angular.module("angular-translate-templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("translate-editor.tpl.html","<div><div class=\"form-group\" ng-class=\"{ \'has-error\': locale.hasError }\"><div class=\"input-group\"><input type=\"text\" class=\"form-control\" ng-model=\"locale.search\" ng-change=\"locale.findByKey(locale.search)\" ng-model-options=\"{ debounce: 500 }\" placeholder=\"Enter xPath Query Here\"><div class=\"input-group-btn\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"locale.addFavourite(locale.search)\"><span class=\"glyphicon\" ng-class=\"{\n						\'glyphicon-star\': !locale.isFavourited(locale.search),\n						\'glyphicon-star-empty\': locale.isFavourited(locale.search)\n					}\"></span></button></div></div><small ng-if=\"locale.hasError\" class=\"pull-right text-danger\">Invalid Query!</small></div><button type=\"button\" class=\"btn btn-default btn-sm\" ng-repeat=\"query in locale.queries\" ng-click=\"locale.findByKey(query.search); locale.search = query.search;\">{{query.label}}</button><div class=\"checkbox pull-right\"><label><input type=\"checkbox\" ng-model=\"locale.isAllCollapsed\" ng-change=\"locale.collapseAll()\"> Expand All</label></div><hr><accordion ng-if=\"!locale.hasError\" close-others=\"false\"><accordion-group ng-repeat=\"language in locale.languages track by language\" is-open=\"locale.tabs[language].$isOpen\"><accordion-heading>{{language | uppercase}} Dictionary <i class=\"glyphicon\" ng-class=\"{\'glyphicon-chevron-down\': locale.tabs[language].$isOpen, \'glyphicon-chevron-right\': !locale.tabs[language].$isOpen}\"></i><div class=\"pull-right\"><button type=\"button\" tabindex=\"-1\" class=\"btn btn-info btn-xs\" ng-if=\"locale.hasUpdateFn\" ng-click=\"locale.callbackUpdate(language, $event)\">Update</button> <button type=\"button\" tabindex=\"-1\" class=\"btn btn-danger btn-xs\" ng-if=\"locale.hasRemoveFn\" ng-click=\"locale.callbackRemove(language, $event)\">Remove</button></div></accordion-heading><div class=\"form-group\" ng-repeat=\"form in locale.bindings[language].forms\"><div ng-if=\"form.hasInput\"><label>{{form.label}}:</label><input type=\"text\" class=\"form-control input-sm\" ng-model=\"form.value\" ng-change=\"locale.updateTranslations(form)\" ng-model-options=\"{ debounce: 500 }\"></div><div ng-if=\"!form.hasInput\"><div ng-if=\"locale.isEmpty(form.value)\"><button type=\"button\" tabindex=\"-1\" class=\"btn btn-warning btn-sm pull-right\" ng-click=\"locale.deleteObjectByKey(form)\">Remove Empty Object</button></div><div class=\"panel panel-default\"><div class=\"panel-body\"><div ng-if=\"form.isFlat\"><div class=\"form-group\" ng-repeat=\"(key, value) in form.value\"><label>{{form.label}}.{{key}}</label><div ng-if=\"locale.isString(value)\" class=\"input-group\"><input type=\"text\" class=\"form-control input-sm\" ng-model=\"value\" ng-change=\"locale.updateObject(locale.translations[language], form, key, value)\" ng-model-options=\"{ debounce: 500 }\"><pre ng-if=\"!locale.isString(value)\">{{value | json}}</pre><span class=\"input-group-btn\"><button type=\"button\" tabindex=\"-1\" class=\"btn btn-warning btn-sm\" ng-click=\"locale.deleteObjectByKey(form, key)\">Delete</button></span></div><div ng-if=\"!locale.isString(value)\"><pre>{{value | json}}</pre><button type=\"button\" tabindex=\"-1\" class=\"btn btn-warning btn-sm\" ng-click=\"locale.deleteObjectByKey(form, key)\">Delete</button></div></div></div><pre ng-if=\"!form.isFlat\">{{form.value | json}}</pre></div><div class=\"panel-footer\"><div class=\"row\"><div class=\"col-md-4\"><label>{{form.label}}.{{locale.newKey}}</label><input type=\"text\" class=\"form-control input-sm\" ng-model=\"locale.newKey\" placeholder=\"TRANSLATION_KEY\"></div><div class=\"col-md-8\"><label>Translated Value</label><div class=\"input-group\"><input type=\"text\" ng-if=\"!locale.insertNewObject[language]\" class=\"form-control input-sm\" ng-model=\"form.newValue\" placeholder=\"Translated Value\"> <span class=\"input-group-btn\"><button type=\"button\" class=\"btn btn-primary btn-sm\" ng-disabled=\"(locale.insertNewObject[language] && !locale.newKey) || (!locale.insertNewObject[language] && !form.newValue || !locale.newKey)\" ng-click=\"locale.writeObjectByKey(locale.translations[language], form)\">Insert</button></span></div></div></div><div class=\"row\"><div class=\"col-md-12\"><div class=\"checkbox\"><label><input type=\"checkbox\" ng-model=\"locale.insertNewObject[language]\"> Insert As New Object</label></div></div></div></div></div></div></div><div ng-if=\"locale.search\" class=\"checkbox\"><label><input type=\"checkbox\" ng-model=\"locale.showAll[language]\"> Show Full Translation</label></div><pre ng-if=\"!locale.search || locale.showAll[language]\">{{locale.translations[language] | json}}</pre></accordion-group></accordion></div>");}]);