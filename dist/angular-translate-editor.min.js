!function(){"use strict";function e(){return{restrict:"E",scope:{basePath:"@",languages:"=",translations:"=",queries:"=",onUpdate:"=",onRemove:"=",onSave:"="},replace:!0,templateUrl:"translate-editor.tpl.html",controller:"TranslateEditorController",controllerAs:"locale",bindToController:!0}}function n(e){function n(){_.each(y.languages,function(e){y.insertNewObject[e]=!1,y.tabs[e]={$isOpen:!1},y.bindings[e]={forms:[]},y.xmlDefinitions[e]=JSON.toXML(y.translations[e])}),_.isEmpty(y.basePath)||(y.search=y.basePath,d(y.basePath))}function a(){_.each(y.languages,function(e){y.xmlDefinitions[e]=JSON.toXML(y.translations[e])})}function t(){_.each(y.languages,function(e){y.bindings[e].forms=[]})}function i(e){return _.all(e,function(e,n){return _.isString(e)})}function o(e,n){var a=e;return _.each(n,function(e){a=a[e]}),a}function l(e,n){if(n=n||[],e.parentNode&&(n=l(e.parentNode,n)),e.previousSibling){var a=1,t=e.previousSibling;do 1==t.nodeType&&t.nodeName==e.nodeName&&a++,t=t.previousSibling;while(t);1==a&&(a=null)}else if(e.nextSibling){var i=e.nextSibling;do i=1==i.nodeType&&i.nodeName==e.nodeName?null:i.previousSibling;while(i)}return 1==e.nodeType&&n.push(e.nodeName),n}function r(){_.each(y.languages,function(e){y.tabs[e].$isOpen=y.isAllCollapsed})}function s(e){return _.contains(_.pluck(y.queries,"search"),e)}function u(e){if(s(e))y.queries=_.reject(y.queries,{search:e});else{var n=prompt("Please enter a label: ",e);_.isEmpty(n)||y.queries.push({label:n,search:e})}}function c(e,n,t,i){var l=o(e,n.path);l[t]=i,n.value=l,l=null,a()}function p(e,n){var t=o(e,n.path);t[y.newKey]=y.insertNewObject[n.lang]?{}:n.newValue,n.value=t,t=null,_.each(_.without(y.languages,n.lang),function(e){t=o(y.translations[e],n.path),_.has(t,y.newKey)||(t[y.newKey]=y.insertNewObject[n.lang]?{}:n.newValue,_.map(y.bindings[e].forms,function(e){e.value=t}))}),delete y.newKey,delete n.newValue,a()}function f(e,t){_.each(y.languages,function(n){var a;t?(a=o(y.translations[n],e.path),delete a[t]):(a=o(y.translations[n],e.path.slice(0,-1)),delete a[_.last(e.path)]),_.map(y.bindings[n].forms,function(n){n.label==e.label&&(n.value=a)})}),t||(delete y.search,n()),a()}function g(e){e.element.innerHTML=e.value;var n=Defiant.node.toJSON(y.xmlDefinitions[e.lang]);angular.copy(n,y.translations[e.lang])}function d(e){if(delete y.newKey,e)try{e=angular.uppercase(e),_.each(y.languages,function(n){y.bindings[n].forms=[];var a=Defiant.node.selectNodes(y.xmlDefinitions[n],e);_.each(a,function(e,a){var t=Defiant.node.toJSON(e),o=l(e).slice(1),r={lang:n,label:o.join("."),path:o,hasInput:"object"!=typeof e,isFlat:_.all(t,function(e,n){return i(e)}),value:t,element:e};r.hasInput="object"!=typeof t,y.bindings[n].forms.push(r)}),y.hasError=!1})}catch(n){y.hasError=!0,t()}else y.hasError=!1,t()}function h(){return _.all(y.languages,function(e){return _.all(y.bindings[e].forms,function(e){return!_.isEmpty(e.value)})})}function b(e,n){return n&&(n.preventDefault(),n.stopPropagation()),y.onUpdate(e)}function v(e,n){return n&&(n.preventDefault(),n.stopPropagation()),y.onRemove(e)}function m(e){return e&&(e.preventDefault(),e.stopPropagation()),y.onSave()}var y=this;y.basePath=y.basePath||"",y.languages=y.languages||[],y.translations=y.translations||{},y.queries=y.queries||[],y.hasUpdateFn=_.isFunction(y.onUpdate),y.hasRemoveFn=_.isFunction(y.onRemove),y.onUpdate=y.onUpdate||angular.noop(),y.onRemove=y.onRemove||angular.noop(),y.onSave=y.onSave||angular.noop(),y.tabs={},y.insertNewObject={},y.bindings={},y.xmlDefinitions={},y.hasError=!1,y.isEmpty=_.isEmpty,y.isString=_.isString,y.collapseAll=r,y.isFavourited=s,y.addFavourite=u,y.updateObject=c,y.writeObjectByKey=p,y.deleteObjectByKey=f,y.updateTranslations=g,y.findByKey=d,y.areTranslationsValid=h,y.callbackUpdate=b,y.callbackRemove=v,y.callbackSave=m,n(),e.$watch(function(){return y.languages},function(e,a){e!=a&&n()},!0)}angular.module("khchan.translate-editor",["ui.bootstrap","angular-translate-templates"]).directive("translateEditor",e).controller("TranslateEditorController",n),e.$inject=[],n.$inject=["$scope"]}();
//# sourceMappingURL=data:application/json;base64,

angular.module("angular-translate-templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("translate-editor.tpl.html","<div><div class=\"row\"><div class=\"form-group\" ng-class=\"{ \'has-error\': locale.hasError }\"><div class=\"input-group\"><input type=\"text\" class=\"form-control\" ng-model=\"locale.search\" ng-change=\"locale.findByKey(locale.search)\" ng-disabled=\"!locale.areTranslationsValid()\" ng-model-options=\"{ debounce: 500 }\" placeholder=\"Enter xPath Query Here\"><div class=\"input-group-btn\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"locale.addFavourite(locale.search)\"><span class=\"glyphicon\" ng-class=\"{\n							\'glyphicon-star\': !locale.isFavourited(locale.search),\n							\'glyphicon-star-empty\': locale.isFavourited(locale.search)\n						}\"></span></button></div></div><small ng-if=\"locale.hasError\" class=\"pull-right text-danger\">Invalid Query!</small></div><button type=\"button\" class=\"btn btn-default btn-sm\" ng-repeat=\"query in locale.queries\" ng-disabled=\"!locale.areTranslationsValid()\" ng-click=\"locale.findByKey(query.search); locale.search = query.search;\">{{query.label}}</button> <button type=\"button\" ng-disabled=\"!locale.areTranslationsValid()\" class=\"btn btn-success pull-right btn-sm\" ng-click=\"locale.callbackSave($event)\">Save All Changes</button></div><div class=\"row\"><div class=\"checkbox pull-right\"><label><input type=\"checkbox\" ng-model=\"locale.isAllCollapsed\" ng-change=\"locale.collapseAll()\"> Expand All</label></div></div><hr><accordion ng-if=\"!locale.hasError\" close-others=\"false\"><accordion-group ng-repeat=\"language in locale.languages track by language\" is-open=\"locale.tabs[language].$isOpen\"><accordion-heading>{{language | uppercase}} Dictionary <i class=\"glyphicon\" ng-class=\"{\'glyphicon-chevron-down\': locale.tabs[language].$isOpen, \'glyphicon-chevron-right\': !locale.tabs[language].$isOpen}\"></i><div class=\"pull-right\"><button type=\"button\" tabindex=\"-1\" class=\"btn btn-danger btn-xs\" ng-if=\"locale.hasRemoveFn\" ng-click=\"locale.callbackRemove(language, $event)\">Remove</button></div></accordion-heading><div class=\"form-group\" ng-repeat=\"form in locale.bindings[language].forms\"><!-- Direct Access to Key --><div ng-if=\"form.hasInput\" ng-class=\"{ \'has-error\': !form.value }\"><label>{{form.label}}:</label><input type=\"text\" class=\"form-control input-sm\" ng-model=\"form.value\" ng-change=\"locale.updateTranslations(form)\" ng-model-options=\"{ debounce: 500 }\" required> <small ng-if=\"!form.value\" class=\"pull-right text-danger\">Missing Translation!</small></div><!-- Inference of Translation Module --><div ng-if=\"!form.hasInput\"><div ng-if=\"locale.isEmpty(form.value)\"><button type=\"button\" tabindex=\"-1\" class=\"btn btn-warning btn-sm pull-right\" ng-click=\"locale.deleteObjectByKey(form)\">Remove Empty Object</button></div><div class=\"panel panel-default\"><div class=\"panel-body\"><div ng-if=\"form.isFlat\"><div class=\"form-group\" ng-repeat=\"(key, value) in form.value\"><label>{{form.label}}.{{key}}</label><!-- String Fields --><div ng-if=\"locale.isString(value)\" class=\"input-group\" ng-class=\"{ \'has-error\': !form.value }\"><input type=\"text\" class=\"form-control input-sm\" ng-model=\"value\" ng-change=\"locale.updateObject(locale.translations[language], form, key, value)\" ng-model-options=\"{ debounce: 500 }\" required> <small ng-if=\"!form.value\" class=\"pull-right text-danger\">Missing Translation!</small><pre ng-if=\"!locale.isString(value)\">{{value | json}}</pre><span class=\"input-group-btn\"><button type=\"button\" tabindex=\"-1\" class=\"btn btn-warning btn-sm\" ng-click=\"locale.deleteObjectByKey(form, key)\">Delete</button></span></div><!-- Object Field --><div ng-if=\"!locale.isString(value)\"><pre>{{value | json}}</pre><button type=\"button\" tabindex=\"-1\" class=\"btn btn-warning btn-sm\" ng-click=\"locale.deleteObjectByKey(form, key)\">Delete</button></div></div></div><pre ng-if=\"!form.isFlat\">{{form.value | json}}</pre></div><div class=\"panel-footer\"><div class=\"row\"><div class=\"col-md-4\"><label>{{form.label}}.{{locale.newKey}}</label><input type=\"text\" class=\"form-control input-sm\" ng-model=\"locale.newKey\" placeholder=\"TRANSLATION_KEY\"></div><div class=\"col-md-8\"><label>Translated Value</label><div class=\"input-group\" ng-class=\"{ \'has-error\': !form.value }\"><input type=\"text\" ng-if=\"!locale.insertNewObject[language]\" class=\"form-control input-sm\" ng-model=\"form.newValue\" placeholder=\"Translated Value\" required> <small ng-if=\"!form.value\" class=\"pull-right text-danger\">Missing Translation!</small> <span class=\"input-group-btn\"><button type=\"button\" class=\"btn btn-primary btn-sm\" ng-disabled=\"(locale.insertNewObject[language] && !locale.newKey) || (!locale.insertNewObject[language] && !form.newValue || !locale.newKey)\" ng-click=\"locale.writeObjectByKey(locale.translations[language], form)\">Insert</button></span></div></div></div><div class=\"row\"><div class=\"col-md-12\"><div class=\"checkbox\"><label><input type=\"checkbox\" ng-model=\"locale.insertNewObject[language]\"> Insert As New Object</label></div></div></div></div></div></div></div><div ng-if=\"locale.search\" class=\"checkbox\"><label><input type=\"checkbox\" ng-model=\"locale.showAll[language]\"> Show Full Translation</label></div><pre ng-if=\"!locale.search || locale.showAll[language]\">{{locale.translations[language] | json}}</pre></accordion-group></accordion></div>");}]);